"""
MIT License

Copyright (c) 2021 Riccardo Ferrero

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""


from pyvista.utilities.helpers import vtk_points
import vtk
import pyvista as pv
import numpy as np
import math
import copy
from vtkmodules.vtkCommonDataModel import (
    vtkCellArray,
    vtkPolyData,
    vtkPolyLine
)

def createPolyline(Instructions=[]):
    """
    This fnction take as input a list of instruction generated by vessel_generator.py and converts them in a vtk polyline using a turtle like approach
    """
    if len(Instructions)==0:
        raise Exception("Instruction list is empty")
    else:
        print('Initializing drawing process')
        pos=[]
        diam=[]
        lines=[]
        points=[]
        t=my3Dturtle()
        pos.append([t.savePos(),0])
        points.append(t.storePoint())
        newline=[]
        newline.append(0)
        poly=pv.PolyData()  
        for instruction in Instructions:
            if instruction[0]=='f':
                t.move(instruction[2])
                diam.append(instruction[1])
                points.append(t.storePoint())
                newline.append(points.__len__()-1)
            elif instruction[0]=='+':
                t.turn(th=instruction[1])
            elif instruction[0]=='-':
                t.turn(th=-instruction[1])
            elif instruction[0]=='*':
                t.turn(ph=instruction[1])
            elif instruction[0]=='/':
                t.turn(ph=-instruction[1])
            elif instruction[0]=='[':
                pos.append([t.savePos(),points.__len__()-1])
            elif instruction[0]==']':
                t.goBack(pos[-1][0][0],pos[-1][0][1],pos[-1][0][2],pos[-1][0][3])
                lines.append(copy.deepcopy(newline))
                newline.clear()
                newline.append(pos[-1][1])
                pos.pop()
            else:
                print('end node')
        lines.append(newline)
        ppoints=np.stack(points)
        vtkPoints=vtk_points(ppoints)
        # Create a cell array to store the lines
        cells = vtkCellArray()
        for i in range (0,len(lines)):
            if len(lines[i])>1:
                polyLine = vtkPolyLine()
                polyLine.GetPointIds().SetNumberOfIds(len(lines[i]))          
                for j in range(0, len(lines[i])):
                    polyLine.GetPointIds().SetId(j, lines[i][j])
                # add the lines to it
                cells.InsertNextCell(polyLine)

        # Create a polydata to store everything in
        polyData = vtkPolyData()

        # Add the points to the dataset
        polyData.SetPoints(vtkPoints)

        # Add the lines to the dataset
        polyData.SetLines(cells)
        pvData=pv.PolyData(polyData)
        tube = pvData.tube(radius=0.1)
        tube.plot(smooth_shading=True)

class my3Dturtle:
    """
    my try yo implement a turtle like thing to move around and create the thing I need
    """
    def __init__(self,coord=np.array([0,0,0]),tan=np.array([1,0,0]),kappa=np.array([0,0,1]),speed=1.0):
        self.coord=coord
        self.tan=tan
        self.kappa=kappa
        self.speed=speed
    def move(self,speed=None):
        """
        propels the tortoise forward along the current direction at the given speed
        """
        if speed is not None:
            self.speed=speed
        self.coord=np.sum([self.coord,self.speed*self.tan], axis=0)
       
            
    def turn(self,th=0,ph=0):
        """
        turns the tortoise of theta and phi to face a new direction
        """
        q1=quatRot.angleAxes(th,self.kappa)
        self.tan=q1.rotate(self.tan)
        q2=quatRot.angleAxes(ph,self.tan)
        self.kappa=q2.rotate(self.kappa)


    def goBack(self,coord,tan,kappa,speed):
        """
        reset the tortoise position to a previously stored position and orientation.
        """
        self.coord=coord
        self.tan=tan
        self.kappa=kappa
        self.speed=speed
    
    def storePoint(self):
        return self.coord
    
    def savePos(self):
        return self.coord,self.tan,self.kappa,self.speed,0

class quatRot:
    """
    my try yo implement a superbasic rotation with quaternions
    can take as input a np arry of four elements and creates a unitari quaternion and its conjucate from it
    """
    def __init__(self,quat=np.array([-1.,0,0,0])):
        self.quat=self.normalize(quat)
        self.quati=np.array([quat[0],-quat[1],-quat[2],-quat[3]])
    @classmethod
    def angleAxes(cls,theta=np.pi/2,axis=np.array([1,0,0])):
        """
        takes an angle and an axes as input and passes to the class the rotation quaternion
        """
        quater=np.array([math.cos(theta/2),math.sin(theta/2)*axis[0],math.sin(theta/2)*axis[1],math.sin(theta/2)*axis[2]])
        return cls(quater)
    
    def rotate(self,vect=np.array([1,0,0])):
        self.vect=np.array([0,vect[0],vect[1],vect[2]])
        rotvect=quatMul(self.vect,self.quati)
        rotvect=quatMul(self.quat,rotvect)
        return rotvect[1:4]

    def normalize(self,quat, tolerance=0.00001):
        mag2 = sum(n * n for n in quat)
        if abs(mag2 - 1.0) > tolerance:
            mag = math.sqrt(mag2)
            quat = tuple(n / mag for n in quat)
        return np.array(quat)
    
def quatMul(q1,q2):
    w1, x1, y1, z1 = q1
    w2, x2, y2, z2 = q2
    w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2
    x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2
    y = w1 * y2 + y1 * w2 + z1 * x2 - x1 * z2
    z = w1 * z2 + z1 * w2 + x1 * y2 - y1 * x2
    return np.array([w, x, y, z])
      

